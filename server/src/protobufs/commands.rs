// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protobufs/commands.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Command)
pub struct Command {
    // message oneof groups
    pub commandType: ::std::option::Option<command::CommandType>,
    // special fields
    // @@protoc_insertion_point(special_field:Command.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Command {
    fn default() -> &'a Command {
        <Command as ::protobuf::Message>::default_instance()
    }
}

impl Command {
    pub fn new() -> Command {
        ::std::default::Default::default()
    }

    // .Registration registration = 1;

    pub fn registration(&self) -> &Registration {
        match self.commandType {
            ::std::option::Option::Some(command::CommandType::Registration(ref v)) => v,
            _ => <Registration as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_registration(&mut self) {
        self.commandType = ::std::option::Option::None;
    }

    pub fn has_registration(&self) -> bool {
        match self.commandType {
            ::std::option::Option::Some(command::CommandType::Registration(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_registration(&mut self, v: Registration) {
        self.commandType = ::std::option::Option::Some(command::CommandType::Registration(v))
    }

    // Mutable pointer to the field.
    pub fn mut_registration(&mut self) -> &mut Registration {
        if let ::std::option::Option::Some(command::CommandType::Registration(_)) = self.commandType {
        } else {
            self.commandType = ::std::option::Option::Some(command::CommandType::Registration(Registration::new()));
        }
        match self.commandType {
            ::std::option::Option::Some(command::CommandType::Registration(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_registration(&mut self) -> Registration {
        if self.has_registration() {
            match self.commandType.take() {
                ::std::option::Option::Some(command::CommandType::Registration(v)) => v,
                _ => panic!(),
            }
        } else {
            Registration::new()
        }
    }

    // .Message message = 2;

    pub fn message(&self) -> &Message {
        match self.commandType {
            ::std::option::Option::Some(command::CommandType::Message(ref v)) => v,
            _ => <Message as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_message(&mut self) {
        self.commandType = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        match self.commandType {
            ::std::option::Option::Some(command::CommandType::Message(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: Message) {
        self.commandType = ::std::option::Option::Some(command::CommandType::Message(v))
    }

    // Mutable pointer to the field.
    pub fn mut_message(&mut self) -> &mut Message {
        if let ::std::option::Option::Some(command::CommandType::Message(_)) = self.commandType {
        } else {
            self.commandType = ::std::option::Option::Some(command::CommandType::Message(Message::new()));
        }
        match self.commandType {
            ::std::option::Option::Some(command::CommandType::Message(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_message(&mut self) -> Message {
        if self.has_message() {
            match self.commandType.take() {
                ::std::option::Option::Some(command::CommandType::Message(v)) => v,
                _ => panic!(),
            }
        } else {
            Message::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Registration>(
            "registration",
            Command::has_registration,
            Command::registration,
            Command::mut_registration,
            Command::set_registration,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Message>(
            "message",
            Command::has_message,
            Command::message,
            Command::mut_message,
            Command::set_message,
        ));
        oneofs.push(command::CommandType::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Command>(
            "Command",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Command {
    const NAME: &'static str = "Command";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.commandType = ::std::option::Option::Some(command::CommandType::Registration(is.read_message()?));
                },
                18 => {
                    self.commandType = ::std::option::Option::Some(command::CommandType::Message(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.commandType {
            match v {
                &command::CommandType::Registration(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &command::CommandType::Message(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.commandType {
            match v {
                &command::CommandType::Registration(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &command::CommandType::Message(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Command {
        Command::new()
    }

    fn clear(&mut self) {
        self.commandType = ::std::option::Option::None;
        self.commandType = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Command {
        static instance: Command = Command {
            commandType: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Command {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Command").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Command {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Command`
pub mod command {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:Command.commandType)
    pub enum CommandType {
        // @@protoc_insertion_point(oneof_field:Command.registration)
        Registration(super::Registration),
        // @@protoc_insertion_point(oneof_field:Command.message)
        Message(super::Message),
    }

    impl ::protobuf::Oneof for CommandType {
    }

    impl ::protobuf::OneofFull for CommandType {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Command as ::protobuf::MessageFull>::descriptor().oneof_by_name("commandType").unwrap()).clone()
        }
    }

    impl CommandType {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<CommandType>("commandType")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Registration)
pub struct Registration {
    // message fields
    // @@protoc_insertion_point(field:Registration.username)
    pub username: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Registration.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Registration {
    fn default() -> &'a Registration {
        <Registration as ::protobuf::Message>::default_instance()
    }
}

impl Registration {
    pub fn new() -> Registration {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "username",
            |m: &Registration| { &m.username },
            |m: &mut Registration| { &mut m.username },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Registration>(
            "Registration",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Registration {
    const NAME: &'static str = "Registration";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.username = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.username);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.username.is_empty() {
            os.write_string(1, &self.username)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Registration {
        Registration::new()
    }

    fn clear(&mut self) {
        self.username.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Registration {
        static instance: Registration = Registration {
            username: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Registration {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Registration").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Registration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Registration {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Message)
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:Message.content)
    pub content: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content",
            |m: &Message| { &m.content },
            |m: &mut Message| { &mut m.content },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.content = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.content);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.content.is_empty() {
            os.write_string(1, &self.content)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.content.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            content: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18protobufs/commands.proto\"s\n\x07Command\x123\n\x0cregistration\
    \x18\x01\x20\x01(\x0b2\r.RegistrationH\0R\x0cregistration\x12$\n\x07mess\
    age\x18\x02\x20\x01(\x0b2\x08.MessageH\0R\x07messageB\r\n\x0bcommandType\
    \"*\n\x0cRegistration\x12\x1a\n\x08username\x18\x01\x20\x01(\tR\x08usern\
    ame\"#\n\x07Message\x12\x18\n\x07content\x18\x01\x20\x01(\tR\x07contentJ\
    \xf6\x02\n\x06\x12\x04\x01\0\x11\x01\n\x16\n\x01\x0c\x12\x03\x01\0\x12\
    \x1a\x0c\x20chat.proto\n\n\n\n\x02\x04\0\x12\x04\x03\0\t\x01\n\n\n\x03\
    \x04\0\x01\x12\x03\x03\x08\x0f\n\x0c\n\x04\x04\0\x08\0\x12\x04\x04\x04\
    \x08\x05\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x04\n\x15\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x05\x08&\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x05\x08\x14\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x15!\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x05$%\n!\n\x04\x04\0\x02\x01\x12\x03\x06\x08\x1c\"\x14\x20.\
    ..\x20other\x20commands\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x06\x08\
    \x0f\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\x10\x17\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x06\x1a\x1b\n\n\n\x02\x04\x01\x12\x04\x0b\0\r\x01\n\
    \n\n\x03\x04\x01\x01\x12\x03\x0b\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x0c\x04\x18\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0c\x04\n\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x0c\x0b\x13\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x0c\x16\x17\n\n\n\x02\x04\x02\x12\x04\x0f\0\x11\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x0f\x08\x0f\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x10\
    \x04\x17\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x10\x04\n\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x10\x0b\x12\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\
    \x10\x15\x16b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Command::generated_message_descriptor_data());
            messages.push(Registration::generated_message_descriptor_data());
            messages.push(Message::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
